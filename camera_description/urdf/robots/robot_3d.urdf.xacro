<?xml version="1.0"?>
<robot name="robot_3d"
  xmlns:xacro="http://www.ros.org/wiki/xacro"
  xmlns:gz="http://gazebosim.org/schema">

  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:arg name="robot_name" default="robot_3d"/>
  <xacro:arg name="prefix" default=""/>
  <xacro:arg name="use_gazebo" default="false"/>

  <xacro:include filename="$(find camera_description)/urdf/sensors/rgbd_camera.urdf.xacro"/>

  <!-- Define box dimensions as variables -->
  <xacro:property name="box_length" value="0.1" />
  <xacro:property name="box_width" value="0.15" />
  <xacro:property name="box_height" value="0.05" />

  <!-- Define camera placement properties -->
  <xacro:property name="camera_z_offset" value="0" />
  <xacro:property name="camera_x_offset" value="${box_length/2+0.02}" />
  <xacro:property name="camera_y_offset" value="0" />
  <!-- add 2cm offset form camera origin -->
  <xacro:property name="camera_rx_offset" value="0" />
  <xacro:property name="camera_ry_offset" value="0" />
  <xacro:property name="camera_rz_offset" value="${0}" />

  <xacro:rgbd_camera prefix="$(arg prefix)" parent="dummy_link" mass = "0.01" camera_name="camera" xyz_offset="${camera_x_offset} ${camera_y_offset} ${camera_z_offset}" rpy_offset="${camera_rx_offset} ${camera_ry_offset} ${camera_rz_offset}" material_color="0.5 0.2 0.2 1" />
  


  <!-- Define the new root link (dummy_link) -->
  <link name="dummy_link">
    <gravity>0</gravity>
    <visual>
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
      <material name="transparent">
        <color rgba="0 0 0 0"/>
        <!-- Making it invisible -->
      </material>
    </visual>
  </link>

  <link name="base_link">
    <gravity>0</gravity>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.1" ixy="0" ixz="0" iyy="0.1" iyz="0" izz="0.1"/>
    </inertial>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${box_length} ${box_width} ${box_height}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${box_length} ${box_width} ${box_height}"/>
      </geometry>
      <material name="red">
        <color rgba="1 0.2 0.2 1.0"/>
      </material>
    </visual>
  </link>

  <!--> Fixed joint connecting dummy_link to base_link -->
  <joint name="dummy_to_base" type="fixed">
    <gravity>0</gravity>
    <parent link="dummy_link"/>
    <child link="base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <gazebo reference="base_link">
    <gravity>0</gravity>
  </gazebo>

  <!-- Define sensor camera  -->


  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo>
    <!-- use VelocityControl plugin -->
    <plugin filename="gz-sim-velocity-control-system" name="gz::sim::systems::VelocityControl">
      <topic>cmd_vel</topic>
      <initial_linear>0 0 0</initial_linear>
      <initial_angular>0 0 0</initial_angular>
    </plugin>

    <plugin filename="gz-sim-odometry-publisher-system" name="gz::sim::systems::OdometryPublisher">
      <dimensions>3</dimensions>
      <odom_topic>odom</odom_topic>
      <odom_frame>odom</odom_frame>
      <robot_base_frame>dummy_link</robot_base_frame>
      <publish_tf>true</publish_tf>
      <tf_topic>tf</tf_topic>
      <odom_publish_frequency>30</odom_publish_frequency>
      <xyz_offset>0 0 0</xyz_offset>
      <rpy_offset>0 0 0</rpy_offset>
    </plugin>
  </gazebo>

  <gazebo reference="camera_link">
    <sensor name="rgbd_camera" type="rgbd_camera">
      <camera>
        <horizontal_fov>1.25</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.3</near>
          <far>15</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.0025</stddev>
        </noise>
        <optical_frame_id>camera_link</optical_frame_id>
      </camera>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
      <topic>camera</topic>
      <gz_frame_id>camera_link</gz_frame_id>
    </sensor>
  </gazebo>



</robot>